[
    {
        "id": "22d32647.d1258a",
        "type": "tab",
        "label": "Flow 1"
    },
    {
        "id": "9856ee0f.384a",
        "type": "mongodb",
        "z": "",
        "hostname": "127.0.0.1",
        "port": "27017",
        "db": "hackathon",
        "name": "hackathonCrawler"
    },
    {
        "id": "1c925b79.bda1b5",
        "type": "http request",
        "z": "22d32647.d1258a",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "url": "http://compras.dados.gov.br/contratos/v1/contratos.json",
        "tls": "",
        "x": 381.2777862548828,
        "y": 299.5243225097656,
        "wires": [
            [
                "f85c7463.4a76f8"
            ]
        ]
    },
    {
        "id": "78f4fada.220754",
        "type": "inject",
        "z": "22d32647.d1258a",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 140,
        "y": 300,
        "wires": [
            [
                "1c925b79.bda1b5"
            ]
        ]
    },
    {
        "id": "f85c7463.4a76f8",
        "type": "debug",
        "z": "22d32647.d1258a",
        "name": "",
        "active": true,
        "console": "true",
        "complete": "payload",
        "x": 677.9444732666016,
        "y": 294.90625,
        "wires": []
    },
    {
        "id": "8e4e3195.2bbd",
        "type": "function",
        "z": "22d32647.d1258a",
        "name": "crawler",
        "func": "var Crawler = global.get('webcrawler');\nvar url = global.get('urlcrawler');\n\n\nvar _msg = '' ;\nvar c = new Crawler({\n    maxConnections : 10,\n    // This will be called for each crawled page \n    callback : function (error, result, $) {\n        // $ is Cheerio by default \n        //a lean implementation of core jQuery designed specifically for the server \n        if(error){\n            console.log(error);\n            _msg += JSON.stringify(error);\n        }else{\n            console.log('.15.' + $(\"title\").text());\n            //console.dir(result);\n            _msg = _msg + $(\"title\").text();\n        }\n    }\n});\n \n// Queue just one URL, with default callback \nc.queue('http://www.amazon.com');\n \n// Queue a list of URLs \nc.queue(['http://www.google.com/','http://www.yahoo.com']);\n\n\n// Queue URLs with custom callbacks & parameters \n/*c.queue([{\n    uri: 'http://www.google.com/',\n    jQuery: false,\n \n    // The global callback won't be called \n    callback: function (error, result) {\n        if(error){\n            console.log(error);\n            msg += JSON.stringify(error);\n        }else{\n            console.log('Grabbed', result.body.length, 'bytes');\n            msg += 'Grabbed' + result.body.length + 'bytes';\n        }\n    }\n}]);\n*/\n\n// Queue some HTML code directly without grabbing (mostly for tests) \n//c.queue([{\n//    html: '<p>This is a <strong>test</strong></p>'\n//}]);\n\nmsg.payload =  _msg;\nconsole.log( '\\n\\n****[' + _msg  + ']***');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 400,
        "y": 80,
        "wires": [
            [
                "e9d4f581.feb5c8"
            ]
        ]
    },
    {
        "id": "39b2552e.932c5a",
        "type": "inject",
        "z": "22d32647.d1258a",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "1200",
        "crontab": "",
        "once": false,
        "x": 216,
        "y": 110,
        "wires": [
            [
                "f6d94887.68deb8"
            ]
        ]
    },
    {
        "id": "e9d4f581.feb5c8",
        "type": "debug",
        "z": "22d32647.d1258a",
        "name": "",
        "active": true,
        "console": "true",
        "complete": "payload",
        "x": 633,
        "y": 96,
        "wires": []
    },
    {
        "id": "f6d94887.68deb8",
        "type": "async",
        "z": "22d32647.d1258a",
        "name": "crawlerassync",
        "async": "var _msg = 'hello google ';var Crawler = context.global.get('webcrawler');var url = context.global.get('urlcrawler');var c = new Crawler({    maxConnections : 10,    callback : function (error, result, $) {        if(error){            console.log(error);            _msg += JSON.stringify(error);        }else{            console.log('.15.' + $('title').text());            _msg = _msg + $('title').text();        }    }}); c.queue(['http://www.google.com/','http://www.yahoo.com','http://www.amazon.com']);  async.parallel({ one: function(join){ _.delay(function(){ join(null, _msg ); }, 2000); }, two: function(join){ _.delay(function(){ join(null, ''); }, 2000); } }, function(err, results) { msg.payload = results.one + results.two; cb(msg); });",
        "outputs": "1",
        "x": 441,
        "y": 143,
        "wires": [
            [
                "e9d4f581.feb5c8",
                "76ea921a.a5e43c"
            ]
        ],
        "outputLabels": [
            "one"
        ]
    },
    {
        "id": "76ea921a.a5e43c",
        "type": "mongodb out",
        "z": "22d32647.d1258a",
        "mongodb": "9856ee0f.384a",
        "name": "",
        "collection": "crawler",
        "payonly": true,
        "upsert": false,
        "multi": false,
        "operation": "store",
        "x": 950,
        "y": 180,
        "wires": []
    }
]